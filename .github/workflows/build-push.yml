name: Docker build and push

on:
  workflow_call:
    inputs:
      context:
        required: false
        type: string
        default: "."
      ecr_repository:
        required: true
        type: string
      registry_aws_account_id:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      aws_ecr_iam_role_arn:
        required: true
        type: string
    outputs:
      image_tag:
        value: ${{ jobs.build-and-push.outputs.image_tag }}
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.aws_ecr_iam_role_arn }}
        role-session-name: build
        role-skip-session-tagging: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: "${{ inputs.registry_aws_account_id }}"

    - name: Set short sha
      id: short-sha
      run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Set tag
      id: set-tag
      run: |
        IMAGE_TAG=${{ github.ref_name }}-${{ env.SHA_SHORT }}
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        push: false
        tags: ${{ inputs.ecr_repository }}:${{ env.IMAGE_TAG }}
        provenance: false

    - name: Push Docker image
      id: push
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        push: true
        tags: ${{ inputs.ecr_repository }}:${{ env.IMAGE_TAG }}
        provenance: false